#!/usr/bin/env python3
#
# Copyright (c) 2010 - 2025, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# We kindly request you to use one or more of the following phrases to refer to
# foxBMS in your hardware, software, documentation or advertising materials:
#
# - "This product uses parts of foxBMS®"
# - "This product includes parts of foxBMS®"
# - "This product is derived from foxBMS®"


"""Build the HAL library for the app."""

from waflib import Logs, Utils


def build(bld):
    """Build the HAL library for the app."""

    target = f"{bld.env.APPNAME.lower()}-hal"
    cflags = bld.env.CFLAGS_HAL
    bld.env.append_unique("HCG_GEN_HAL_INC_PATHS", [bld.path.get_bld().relpath()])
    source = None
    remove = None
    startup_hash = None
    if Utils.is_win32 or bld.env.HALCOGEN:
        startup_hash = bld.path.find_node("app-startup.hash")
        remove = [
            "source/HL_notification.c",
            "source/HL_sys_main.c",
            "source/HL_sys_startup.c",
            "source/HL_sys_link.cmd",
            "source/HL_emac.c",
        ]
        source = ["../../../conf/hcg/app.hcg"]
    else:
        hal_src_dir = bld.path.get_bld().find_dir("source")
        hal_inc_dir = bld.path.get_bld().find_dir("include")
        Logs.warn(
            "HALCogen is not available and therefore the code generator "
            "can not run. Assuming HAL sources are available at "
            f"{hal_src_dir} and {hal_inc_dir}."
        )
        if hal_src_dir:
            source = hal_src_dir.ant_glob("*.c") + hal_src_dir.ant_glob("*.asm")
    if source:
        bld.objects(
            source="app-hl_notification.c",
            target="app-hl_notification-object",
            includes="../main/include",
            idx=1,
        )
        bld(
            features="c cstlib",
            source=source,
            cflags=cflags,
            target=target,
            use="app-hl_notification-object",
            startup_hash=startup_hash,
            remove=remove,
            idx=1,
        )
