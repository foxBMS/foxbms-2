#!/usr/bin/env python3
#
# Copyright (c) 2010 - 2025, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# We kindly request you to use one or more of the following phrases to refer to
# foxBMS in your hardware, software, documentation or advertising materials:
#
# - "This product uses parts of foxBMS®"
# - "This product includes parts of foxBMS®"
# - "This product is derived from foxBMS®"

"""Testing file 'cli/commands/c_plot.py'."""

import shutil
import sys
import unittest
from datetime import datetime
from pathlib import Path
from unittest.mock import patch

import yaml
from click.testing import CliRunner

try:
    from cli.cli import main
    from cli.helpers.misc import PROJECT_BUILD_ROOT

except ModuleNotFoundError:
    sys.path.insert(0, str(Path(__file__).parents[3]))
    from cli.cli import main
    from cli.helpers.misc import PROJECT_BUILD_ROOT

# Path of temp where the temporal files generated by test function will be saved
PATH_TEMP = Path(__file__).parent / "temp"


class TestFoxCliMainCommandPlot(unittest.TestCase):
    """Test of the 'plot' commands and options."""

    def setUp(self):
        # Create temporary directory for saving files generated by test functions
        self.start_time = datetime.now()
        PATH_TEMP.mkdir(parents=True, exist_ok=True)
        self.test_data_config = PATH_TEMP / "test_data_config.yaml"
        with open(self.test_data_config, mode="w", encoding="utf-8") as file:
            yaml.dump({}, file)
        self.test_plot_config = PATH_TEMP / "test_plot_config.yaml"
        with open(self.test_plot_config, mode="w", encoding="utf-8") as file:
            yaml.dump({}, file)
        self.test_csv_file = str(PATH_TEMP / "test_csv_file.csv")
        Path(self.test_csv_file).write_text("Test Data", encoding="utf-8")

    def tearDown(self):
        # Delete the temporary directory
        shutil.rmtree(PATH_TEMP)
        if (PROJECT_BUILD_ROOT / "plots").is_dir():
            try:
                # st_birthtime is not always available see docs
                # https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime
                birthtime = datetime.fromtimestamp(
                    (PROJECT_BUILD_ROOT / "plots").stat().st_birthtime
                )
            except AttributeError:
                birthtime = datetime.fromtimestamp(
                    (PROJECT_BUILD_ROOT / "plots").stat().st_atime
                )
            if birthtime > self.start_time:
                shutil.rmtree(PROJECT_BUILD_ROOT / "plots")

    @patch("cli.cmd_plot.execution.Executor.create_plots")
    def test_plot(self, mock_create_plots):  # pylint: disable=unused-argument
        """Test 'fox.py plot --data-config --plot-config --output [INPUT_DATA]'
        command with a valid file."""
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                str(Path(__file__).parent),
                self.test_csv_file,
            ],
        )
        self.assertEqual("", result.stderr)
        self.assertEqual(0, result.exit_code)

    @patch("cli.cmd_plot.execution.Executor.create_plots")
    def test_plot_type(self, mock_create_plots):  # pylint: disable=unused-argument
        """Test 'fox.py plot --data-type --data-config --plot-config --output [INPUT_DATA]'
        command with a valid file."""
        # Case 1: invalid type
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-type",
                "PNG",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                str(Path(__file__).parent),
                self.test_csv_file,
            ],
        )
        self.assertIn(
            "Invalid value for '-t' / '--data-type': 'PNG' is not 'CSV'.", result.stderr
        )
        # Click usage error exists with error code 2
        self.assertEqual(2, result.exit_code)

        # Case 2: valid type
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-type",
                "CSV",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                str(Path(__file__).parent),
                self.test_csv_file,
            ],
        )
        self.assertEqual("", result.stderr)
        self.assertEqual(0, result.exit_code)

    @patch("cli.cmd_plot.execution.Executor.create_plots")
    def test_plot_directory(self, mock_create_plots):  # pylint: disable=unused-argument
        """Test 'fox.py plot --data-config --plot-config --output [INPUT_DATA]'
        command with a directory as input_data."""
        # Case 1: without data type given
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                str(Path(__file__).parent),
                str(Path(__file__).parent),
            ],
        )
        self.assertIn(
            "Data source type is required when a directory is passed as input data.",
            result.stderr,
        )
        self.assertEqual(1, result.exit_code)

        # Case 2: data type given
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-type",
                "CSV",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                str(Path(__file__).parent),
                str(Path(__file__).parent),
            ],
        )
        self.assertEqual("", result.stderr)
        self.assertEqual(0, result.exit_code)

    @patch("cli.cmd_plot.execution.Executor.create_plots")
    def test_plot_no_output(self, mock_create_plots):  # pylint: disable=unused-argument
        """Test 'fox.py plot --data-config --plot-config [INPUT_DATA]'
        command with a valid file."""
        # Case 1: no output
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                self.test_csv_file,
            ],
        )
        self.assertEqual("", result.stderr)
        self.assertEqual(0, result.exit_code)

        # Case 2: output is file
        runner = CliRunner()
        result = runner.invoke(
            main,
            [
                "plot",
                "--data-config",
                self.test_data_config,
                "--plot-config",
                self.test_plot_config,
                "--output",
                self.test_csv_file,
                self.test_csv_file,
            ],
        )
        self.assertEqual("", result.stderr)
        self.assertEqual(0, result.exit_code)


if __name__ == "__main__":
    unittest.main()
