#!/usr/bin/env python3
#
# Copyright (c) 2010 - 2025, Fraunhofer-Gesellschaft zur Foerderung der angewandten Forschung e.V.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# We kindly request you to use one or more of the following phrases to refer to
# foxBMS in your hardware, software, documentation or advertising materials:
#
# - "This product uses parts of foxBMS®"
# - "This product includes parts of foxBMS®"
# - "This product is derived from foxBMS®"

"""Runs HALCoGen in the current directory."""

from waflib.Build import BuildContext, CleanContext
from waflib.Configure import ConfigurationContext
from waflib.Options import OptionsContext

TOOLDIR = "../../../tools/waf-tools"

BUILD_VARIANTS = ["app", "bootloader"]

for var in ["app", "bootloader"]:
    for cont in [BuildContext, CleanContext]:
        # pylint: disable-next=invalid-name
        name = cont.__name__.replace("Context", "").lower()

        # pylint: disable-next=invalid-name
        class tmp_1(cont):
            """Helper class to create the build variant commands"""

            if name == "build":
                __doc__ = f"executes the {name} of {var}"
            elif name == "install":
                __doc__ = f"flash {var} to the target"
            elif name == "clean":
                __doc__ = f"cleans the project {var}"
            cmd = str(name) + "_" + var
            variant = var


def options(opt: OptionsContext):
    """defines options that can be passed to waf"""
    opt.top = "."


def configure(cnf: ConfigurationContext):
    """configures the project"""
    cnf.load("f_hcg", tooldir=TOOLDIR)


def build(bld: BuildContext):
    """Run HALCoGen"""
    if not bld.variant:
        bld.fatal(
            f"A {bld.cmd} variant must be specified. The build variants are: "
            f"{', '.join(BUILD_VARIANTS)}."
        )
    remove = [
        "source/HL_notification.c",
        "source/HL_sys_main.c",
        "source/HL_sys_startup.c",
        "source/HL_sys_link.cmd",
    ]
    source = f"../../../conf/hcg/{bld.variant}.hcg"
    startup_hash = bld.path.find_node(
        f"../../../src/{bld.variant}/hal/{bld.variant}-startup.hash"
    )

    bld(source=source, unit_test=True, startup_hash=startup_hash, remove=remove)
